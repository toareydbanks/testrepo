 private bool Commit(string mainProjectName, string currProjectName, string rev, string projectname, string membername, string itemdesc, string sandBoxName, string toPath, string branchname, long rowcount, bool needdiv = false)
        {
            string newpath = "";
            bool commitsuccessful = false;
            bool dirfilesext = false;
            bool fexist = false;
            bool commitfile = false;
            List<string> filePaths = new List<string>();
            DirectoryInfo di;
            string currentfilename = "";
            string repofilename = "";
            bool processfile = true;

            try
            {

                var stlst = Directory.GetFiles(sandBoxName, "*.*",
                         SearchOption.AllDirectories);
                filePaths = new List<string>(stlst);
                DirectoryInfo mdi = new DirectoryInfo(projectname);
                List<string> templst = GetDirectoryListing(mdi, mainProjectName);
                newpath = SetDirectories(Path.Combine(toPath, mainProjectName), templst);
                dirfilesext = true;

            }
            catch {
                dirfilesext = false;
            }
            finally {

                if (dirfilesext)
                {
                    try
                    {
                        foreach (string sitem in filePaths)
                        {
                            di = new DirectoryInfo(sitem);
                            currentfilename = di.FullName;
                            if (membername == di.Name)
                            {
                                repofilename = String.Format(@"{0}\{1}", newpath, di.Name);
                                File.SetAttributes(repofilename, FileAttributes.Normal);
                                fexist = CheckForFile(repofilename);
                                if (fexist) { break; }
                            }
                        }
                    }
                    catch (InvalidCastException e)
                    {
                        fexist = false;
                        commitsuccessful = false;
                        processfile = false;
                    }
                    finally
                    {
                        if (processfile)
                        {
                            bool samefile = false;
                            if (fexist)
                            {
                                samefile = CompareFiles(repofilename, currentfilename);
                                if (!samefile)
                                {
                                    StringBuilder ohs = new StringBuilder();
                                    ohs.Append(itemdesc.Substring(0, itemdesc.IndexOf("Date:")));
                                    ohs.AppendLine("Removal of Previous File - Updating File");
                                    Commit(toPath, ohs.ToString(), branchname, repofilename, (rowcount > 1));
                                }
                            }
                            if (!fexist || !samefile)
                            {
                                File.Copy(currentfilename, repofilename, true);
                                Commit(toPath, itemdesc, branchname, "", (rowcount > 1));
                            }

                        }

                    }
                }
                fexist = false;
                repofilename = "";
                currentfilename = "";
            }

            return commitsuccessful;
        }
        private bool CheckForFile(string filename) {
            return File.Exists(filename);
        }
		
		      public bool CompareFiles(string file1FullPath, string file2FullPath)
        {
            if (!File.Exists(file1FullPath) | !File.Exists(file2FullPath))
                // One or both of the files does not exist.
                return false;

            if (file1FullPath == file2FullPath)
                // fileFullPath1 and fileFullPath2 points to the same file...
                return true;

            try
            {
                string file1Hash = hashFile(file1FullPath);
                string file2Hash = hashFile(file2FullPath);

                if (file1Hash == file2Hash)
                    return true;
                else
                    return false;
            }
            catch (Exception ex)
            {
                return false;
            }
        }

        private string hashFile(string filepath)
        {
            using (System.IO.FileStream reader = new System.IO.FileStream(filepath, System.IO.FileMode.Open, System.IO.FileAccess.Read))
            {
                using (System.Security.Cryptography.MD5CryptoServiceProvider md5 = new System.Security.Cryptography.MD5CryptoServiceProvider())
                {
                    byte[] hash = md5.ComputeHash(reader);
                    return System.Text.Encoding.Unicode.GetString(hash);
                }
            }
        }
